package com.my.dor_metagraph.shared_data
//
//import com.my.dor_metagraph.shared_data.Utils.buildSignedUpdate
//import weaver.SimpleIOSuite
//
//object UtilsTest extends SimpleIOSuite {
//
//  pureTest("Build signed update") {
//    val cborString
//    val signedUpdate = buildSignedUpdate(cborString.getBytes())
//
//    expect.eql(1669815076, signedUpdate.dts)
//    expect.eql(3, signedUpdate.ac.length)
//    expect.eql("6d38286a6620d675448de8368aad8daeee87590c6ffa5df619ee525b274727b6bee92257af7136956304f0d475c9b042a7585917545d125d49bafc88d53fbcce", signedUpdate.proofs.head.id.hex.value)
//    expect.eql("3045022100ddcb3f595c5e0e42544a87e406a2d9016e40301b0a7a3ee0efd2b535b0e7c202022048b1c4dfb6b129b840d4a9db1fb385d6f121d045bbbacc92aacc308775b66113", signedUpdate.proofs.head.signature.value.value)
//  }
//
//  pureTest("Error with incomplete CBOR string") {
//    val cborString = "A362616383188F38B43925B8636474731A63875B2461658A821B00000184A0C9AF5E01821B00000194A0CD649601821B00000184A0CE04BF01821B00000184A0D0CF9801821B00000184A0D3254101821B00000184A0D3968A01821B00000184A0D3C95301821B00000184A0D3F06401821B00000184A0D47D0501821B00000184A0D48CA601"
//
//    try {
//      buildSignedUpdate(cborString.getBytes())
//      expect.eql(1,1)
//    } catch {
//      case e: Exception =>
//        expect.eql("Cannot decode `DeviceCheckInWithSignature` instance due to missing map keys \"id\" and \"signature\" (input position 133)", e.getMessage)
//    }
//  }
//}