package com.my.dor_metagraph.shared_data

import cats.effect.{IO, Resource}
import com.my.dor_metagraph.shared_data.Utils.{buildSignedUpdate, getDagAddressFromPublicKey}
import org.tessellation.security.SecurityProvider
import weaver.MutableIOSuite

object UtilsTest extends MutableIOSuite {

  override type Res = SecurityProvider[IO]

  override def sharedResource: Resource[IO, SecurityProvider[IO]] = SecurityProvider.forAsync[IO]

  pureTest("Build signed update") {
    val cborString = "0xbf, 0x64, 0x63, 0x62, 0x6f, 0x72, 0x58, 0x93, 0xbf, 0x62, 0x61, 0x63, 0x9f, 0x18, 0x8f, 0x38, 0xb4, 0x39, 0x25, 0xb8, 0xff, 0x63, 0x64, 0x74, 0x73, 0x1a, 0x63, 0x87, 0x5b, 0x24, 0x61, 0x65, 0x9f, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xc9, 0xaf, 0x5e, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x94, 0xa0, 0xcd, 0x64, 0x96, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xce, 0x08, 0xa7, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xd0, 0xcf, 0x98, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xd3, 0x25, 0x41, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xd3, 0x96, 0x8a, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xd3, 0xc9, 0x53, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xd3, 0xf0, 0x64, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xd4, 0x7d, 0x05, 0x01, 0xff, 0x9f, 0x1b, 0x00, 0x00, 0x01, 0x84, 0xa0, 0xd4, 0x8c, 0xa6, 0x01, 0xff, 0xff, 0xff, 0x62, 0x69, 0x64, 0x58, 0x41, 0x04, 0xbf, 0xca, 0xaf, 0xb8, 0xff, 0xf3, 0x0b, 0x01, 0x6a, 0x45, 0xdd, 0x1c, 0xaa, 0x52, 0xd1, 0xdd, 0x5f, 0x8a, 0x70, 0xe9, 0xc6, 0x83, 0xb5, 0x11, 0x05, 0xd1, 0xac, 0x8b, 0xd3, 0x3e, 0xc7, 0xbf, 0x03, 0x25, 0xc0, 0x9e, 0x66, 0x86, 0xed, 0x36, 0x77, 0x96, 0xbd, 0xfa, 0x29, 0xfa, 0xe6, 0x8a, 0x92, 0x81, 0x5e, 0x4f, 0x8e, 0x6a, 0xf8, 0xd8, 0xaa, 0x70, 0xbf, 0x10, 0x01, 0x85, 0x26, 0x1a, 0x63, 0x73, 0x69, 0x67, 0x58, 0x48, 0x30, 0x46, 0x02, 0x21, 0x00, 0xbf, 0xca, 0xaf, 0xb8, 0xff, 0xf3, 0x0b, 0x01, 0x6a, 0x45, 0xdd, 0x1c, 0xaa, 0x52, 0xd1, 0xdd, 0x5f, 0x8a, 0x70, 0xe9, 0xc6, 0x83, 0xb5, 0x11, 0x05, 0xd1, 0xac, 0x8b, 0xd3, 0x3e, 0xc7, 0xbf, 0x02, 0x21, 0x00, 0xfb, 0xf8, 0xad, 0xb6, 0x00, 0x8f, 0x05, 0x20, 0x08, 0x47, 0xd9, 0x11, 0x12, 0xdf, 0x1f, 0x40, 0x50, 0x1c, 0x42, 0xb6, 0xfc, 0x94, 0x36, 0xa1, 0x48, 0x92, 0xc6, 0xf2, 0x44, 0x0b, 0xa4, 0x64, 0xff"
    val bytes = cborString.split(",").map(it => Integer.decode(it.trim).toByte)
    val signedUpdate = buildSignedUpdate(bytes)

    expect.eql("bf6261639f188f38b43925b8ff636474731a63875b2461659f9f1b00000184a0c9af5e01ff9f1b00000194a0cd649601ff9f1b00000184a0ce08a701ff9f1b00000184a0d0cf9801ff9f1b00000184a0d3254101ff9f1b00000184a0d3968a01ff9f1b00000184a0d3c95301ff9f1b00000184a0d3f06401ff9f1b00000184a0d47d0501ff9f1b00000184a0d48ca601ffffff", signedUpdate.cbor)
    expect.eql("6d38286a6620d675448de8368aad8daeee87590c6ffa5df619ee525b274727b6bee92257af7136956304f0d475c9b042a7585917545d125d49bafc88d53fbcce", signedUpdate.proofs.head.id.hex.value)
    expect.eql("3046022100bfcaafb8fff30b016a45dd1caa52d1dd5f8a70e9c683b51105d1ac8bd33ec7bf022100fbf8adb6008f05200847d91112df1f40501c42b6fc9436a14892c6f2440ba464", signedUpdate.proofs.head.signature.value.value)
  }

  test("Test get DAG address from pub_key") { implicit sp: SecurityProvider[IO] =>
    val publicKey = "d741b547225b6ba6f1ba38be192ab7550b7610ef54e7fee88a9666b79a12a6741d1565241fba5c2a812be66edd878824f927a42430ffba48fa0bd0264a5483bf"
    val addressIO = getDagAddressFromPublicKey(publicKey, sp)
    for {
      address <- addressIO
    } yield expect("DAG3Z6oMiqXyi4SKEU4u4fwNiYAMYFyPwR3ttTSd" == address.value.value)
  }

}