name: Deploy

inputs:
  AWS_ACCESS_KEY_ID:
    required: true
  AWS_SECRET_ACCESS_KEY:
    required: true
  AWS_REGION:
    required: true
  EC2_INSTANCE_1_ID:
    required: true
  EC2_INSTANCE_2_ID:
    required: true
  EC2_INSTANCE_3_ID:
    required: true
  GITHUB_TOKEN:
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Install AWS Cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        arch: amd64
    - name: Install jq
      shell: bash
      run: |
        sudo apt install -y jq

    - name: Filling EC2 instances information
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
      shell: bash
      run: |
        echo "EC2_INSTANCE_1_ID=${{ inputs.EC2_INSTANCE_1_ID }}" >> $GITHUB_ENV
        echo "EC2_INSTANCE_2_ID=${{ inputs.EC2_INSTANCE_2_ID }}" >> $GITHUB_ENV
        echo "EC2_INSTANCE_3_ID=${{ inputs.EC2_INSTANCE_3_ID }}" >> $GITHUB_ENV
        echo "BUCKET_NAME=dor-metagraph" >> $GITHUB_ENV

    - name: Install AWS Cli on instances if not exists
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
      shell: bash
      run: |
        aws ssm send-command \
        --instance-id $EC2_INSTANCE_1_ID \
        --document-name "AWS-RunShellScript" \
        --parameters '{"commands":["if ! command -v aws &> /dev/null; then sudo apt-get update -y && sudo apt-get install -y awscli; fi"]}'
        
        aws ssm send-command \
        --instance-id $EC2_INSTANCE_2_ID \
        --document-name "AWS-RunShellScript" \
        --parameters '{"commands":["if ! command -v aws &> /dev/null; then sudo apt-get update -y && sudo apt-get install -y awscli; fi"]}'
        
        aws ssm send-command \
        --instance-id $EC2_INSTANCE_3_ID \
        --document-name "AWS-RunShellScript" \
        --parameters '{"commands":["if ! command -v aws &> /dev/null; then sudo apt-get update -y && sudo apt-get install -y awscli; fi"]}'
    - name: Validate S3 bucket
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
      run: |
        if ! aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
          aws s3api create-bucket --bucket "$BUCKET_NAME"
          echo "Bucket '$BUCKET_NAME' created successfully"
        else
          echo "Bucket '$BUCKET_NAME' already exists."
        fi

    - name: Get tessellation version to build
      shell: bash
      run: |
        echo "TESSELLATION_VERSION=v$(cat metagraph/project/Dependencies.scala | grep -E "tessellation = \"(.*)" | grep -o "\".*\"" | grep -Eo "[^\"]*")" >> $GITHUB_ENV

    - name: Clone and generate Tessellation dependencies
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      shell: bash
      run: |
        echo "TESSELLATION_VERSION=$TESSELLATION_VERSION"
        
        mkdir .github/dependencies
        cd .github/dependencies
        git clone https://github.com/Constellation-Labs/tessellation.git
        cd tessellation
        git checkout $TESSELLATION_VERSION
        
        sbt --error shared/publishM2 kernel/publishM2 keytool/publishM2 sdk/publishM2 dagL1/publishM2 currencyL0/publishM2 currencyL1/publishM2

    - name: Generate Metagraph JARS
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      shell: bash
      run: |
        cd metagraph
        sbt currencyL1/assembly currencyL0/assembly dataL1/assembly

    - name: Move JARS to artifact folder
      shell: bash
      run: |
        mkdir .github/artifacts
        mv metagraph/modules/l0/target/scala-2.13/dor_metagraph-currency-l0-assembly-0.1.0-SNAPSHOT.jar .github/artifacts/metagraph-l0.jar
        mv metagraph/modules/data_l1/target/scala-2.13/dor_metagraph-data_l1-assembly-0.1.0-SNAPSHOT.jar .github/artifacts/data-l1.jar
        mv metagraph/modules/l1/target/scala-2.13/dor_metagraph-currency-l1-assembly-0.1.0-SNAPSHOT.jar .github/artifacts/currency-l1.jar

    - name: Send JARs to S3 bucket
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
      run: |
        cd .github/artifacts
        aws s3 cp metagraph-l0.jar s3://dor-metagraph-jars
        aws s3 cp data-l1.jar s3://dor-metagraph-jars
        aws s3 cp currency-l1.jar s3://dor-metagraph-jars

    - name: Send JARS from S3 to EC2 - Instance 1
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
      run: |
        METAGRAPH_L0_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/metagraph-l0.jar /home/ubuntu/code/metagraph-l0/"
        CURRENCY_L1_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/currency-l1.jar /home/ubuntu/code/currency-l1/"
        DATA_L1_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/data-l1.jar /home/ubuntu/code/data-l1/"
        
        metagraph_l0_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_1_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$METAGRAPH_L0_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$metagraph_l0_command_id"
        
        metagraph_l0_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$metagraph_l0_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $metagraph_l0_exit_code -eq 0 ]
        then
          echo "Metagraph L0 JAR uploaded successfully - Instance 1"
        else
          echo "Failure when uploading Metagraph L0 JAR - Instance 1"
          exit 1
        fi
        
        currency_l1_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_1_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$CURRENCY_L1_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$currency_l1_command_id"
        
        currency_l1_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$currency_l1_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $currency_l1_exit_code -eq 0 ]
        then
          echo "Currency L1 JAR uploaded successfully - Instance 1"
        else
          echo "Failure when uploading Currency L1 JAR - Instance 1"
          exit 1
        fi
        
        data_l1_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_1_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$DATA_L1_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$data_l1_command_id"
        
        data_l1_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$data_l1_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $data_l1_exit_code -eq 0 ]
        then
          echo "Data L1 JAR uploaded successfully - Instance 1"
        else
          echo "Failure when uploading Data L1 JAR - Instance 1"
          exit 1
        fi

    - name: Send JARS from S3 to EC2 - Instance 2
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
      run: |
        METAGRAPH_L0_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/metagraph-l0.jar /home/ubuntu/code/metagraph-l0/"
        CURRENCY_L1_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/currency-l1.jar /home/ubuntu/code/currency-l1/"
        DATA_L1_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/data-l1.jar /home/ubuntu/code/data-l1/"
        
        metagraph_l0_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_2_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$METAGRAPH_L0_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$metagraph_l0_command_id"
        
        metagraph_l0_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$metagraph_l0_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $metagraph_l0_exit_code -eq 0 ]
        then
          echo "Metagraph L0 JAR uploaded successfully - Instance 2"
        else
          echo "Failure when uploading Metagraph L0 JAR - Instance 2"
          exit 1
        fi
        
        currency_l1_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_2_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$CURRENCY_L1_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$currency_l1_command_id"
        
        currency_l1_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$currency_l1_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $currency_l1_exit_code -eq 0 ]
        then
          echo "Currency L1 JAR uploaded successfully - Instance 2"
        else
          echo "Failure when uploading Currency L1 JAR - Instance 2"
          exit 1
        fi
        
        data_l1_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_2_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$DATA_L1_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$data_l1_command_id"
        
        data_l1_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$data_l1_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $data_l1_exit_code -eq 0 ]
        then
          echo "Data L1 JAR uploaded successfully - Instance 2"
        else
          echo "Failure when uploading Data L1 JAR - Instance 2"
          exit 1
        fi

    - name: Send JARS from S3 to EC2 - Instance 3
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
      run: |
        METAGRAPH_L0_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/metagraph-l0.jar /home/ubuntu/code/metagraph-l0/"
        CURRENCY_L1_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/currency-l1.jar /home/ubuntu/code/currency-l1/"
        DATA_L1_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && aws s3 cp s3://dor-metagraph-jars/data-l1.jar /home/ubuntu/code/data-l1/"
        
        metagraph_l0_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_3_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$METAGRAPH_L0_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$metagraph_l0_command_id"
        
        metagraph_l0_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$metagraph_l0_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $metagraph_l0_exit_code -eq 0 ]
        then
          echo "Metagraph L0 JAR uploaded successfully - Instance 3"
        else
          echo "Failure when uploading Metagraph L0 JAR - Instance 3"
          exit 1
        fi
        
        currency_l1_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_3_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$CURRENCY_L1_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$currency_l1_command_id"
        
        currency_l1_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$currency_l1_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $currency_l1_exit_code -eq 0 ]
        then
          echo "Currency L1 JAR uploaded successfully - Instance 3"
        else
          echo "Failure when uploading Currency L1 JAR - Instance 3"
          exit 1
        fi
        
        data_l1_command_id=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_3_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$DATA_L1_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$data_l1_command_id"
        
        data_l1_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$data_l1_command_id" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $data_l1_exit_code -eq 0 ]
        then
          echo "Data L1 JAR uploaded successfully - Instance 3"
        else
          echo "Failure when uploading Data L1 JAR - Instance 3"
          exit 1
        fi


    - name: Kill current Metagraph execution
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
      run: |
        DESTROY_COMMAND="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION && fuser -k 7000/tcp && fuser -k 8000/tcp && fuser -k 9000/tcp"
        
        destroy_command_instance_1=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_1_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$DESTROY_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$destroy_command_instance_1"
        
        destroy_command_instance_1_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_1_ID \
        --command-id "$destroy_command_instance_1" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $destroy_command_instance_1_exit_code -eq 0 ]
        then
          echo "Instance 1 processes killed successfully"
        else
          echo "Failure killing processes Instance 1"
          exit 1
        fi
        
        destroy_command_instance_2=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_2_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$DESTROY_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$destroy_command_instance_2"
        
        destroy_command_instance_2_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_2_ID \
        --command-id "$destroy_command_instance_2" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $destroy_command_instance_2_exit_code -eq 0 ]
        then
          echo "Instance 2 processes killed successfully"
        else
          echo "Failure killing processes Instance 2"
          exit 1
        fi
        
        destroy_command_instance_3=$(aws ssm send-command \
        --instance-id $EC2_INSTANCE_3_ID \
        --document-name "AWS-RunShellScript" \
        --parameters commands=["$DESTROY_COMMAND"] \
        --query "Command.CommandId" \
        --output text)
        
        aws ssm wait command-executed \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$destroy_command_instance_3"
        
        destroy_command_instance_3_exit_code=$(aws ssm list-command-invocations \
        --instance-id $EC2_INSTANCE_3_ID \
        --command-id "$destroy_command_instance_3" \
        --details \
        --query "CommandInvocations[0].CommandPlugins[0].ResponseCode" \
        --output text)
        
        if [ $destroy_command_instance_3_exit_code -eq 0 ]
        then
          echo "Instance 3 processes killed successfully"
        else
          echo "Failure killing processes Instance 3"
          exit 1
        fi

    - name: Save Metagraph L0 JAR
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: metagraph-l0.jar
        path: .github/artifacts/metagraph-l0.jar
    - name: Save Currency L1 JAR
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: currency-l0.jar
        path: .github/artifacts/currency-l1.jar
    - name: Save Data L1 JAR
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: data-l1.jar
        path: .github/artifacts/data-l1.jar